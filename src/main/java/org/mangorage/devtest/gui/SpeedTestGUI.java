package org.mangorage.devtest.gui;

import fr.bmartel.speedtest.model.SpeedTestError;
import org.mangorage.devtest.core.BitType;
import org.mangorage.devtest.core.ISpeedTestHook;
import org.mangorage.devtest.core.SpeedTestManager;
import org.mangorage.devtest.core.Status;

import javax.swing.*;
import javax.swing.text.NumberFormatter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.NumberFormat;

import static javax.swing.JOptionPane.ERROR_MESSAGE;

public class SpeedTestGUI extends javax.swing.JFrame implements ISpeedTestHook {

    private BitType.Type type = BitType.Type.BIT;
    private Status status = Status.STOPPED;

    private long downloadBits = -1;
    private long uploadBits = -1;
    /**
     * Creates new form SpeedTest
     */
    public SpeedTestGUI() {
        initComponents();
        SpeedTestManager.getInstance().hook(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setTitle("Speed Test (By MangoRage)");
        NumberFormatter numberFormatter = new NumberFormatter(NumberFormat.getNumberInstance());
        numberFormatter.setValueClass(Integer.class);
        numberFormatter.setMinimum(0);

        downloadSpeedLabel = new javax.swing.JLabel();
        UploadSpeedLabel = new javax.swing.JLabel();
        downloadURLTextArea = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        UploadURLTextArea = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        UseBytes = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        startStopbutton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        statusTextLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        runTimeTextArea = new javax.swing.JFormattedTextField(numberFormatter);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


        downloadSpeedLabel.setText("Download Speed: N/A");

        UploadSpeedLabel.setText("Upload Speed: N/A");

        downloadURLTextArea.setText("http://speedtest.newark.linode.com/1GB-newark.bin");

        jLabel4.setText("Download URL");

        UploadURLTextArea.setText("ftp://speedtest.tele2.net/upload/");

        jLabel5.setText("Upload URL");

        UseBytes.setText("Toggle");
        UseBytes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                type = UseBytes.isSelected() ? BitType.Type.BYTE : BitType.Type.BIT;


                if (downloadBits == -1) {

                } else {
                    BitType.Result result = BitType.getLargestSize(downloadBits, type);
                    String resultString = result.getRoundedString();
                    downloadSpeedLabel.setText("Download Speed: %sps".replace("%s", resultString));
                }

                if (uploadBits == -1) {

                } else {
                    BitType.Result result = BitType.getLargestSize(uploadBits, type);
                    String resultString = result.getRoundedString();
                    UploadSpeedLabel.setText("Upload Speed: %sps".replace("%s", resultString));
                }

            }
        });

        jLabel6.setText("Use Bytes formatting:");

        startStopbutton.setText("Start");
        startStopbutton.addActionListener(this::startStopbuttonActionPerformed);

        statusTextLabel.setText("Stopped");

        jLabel9.setText("Run time:");

        runTimeTextArea.setText("0");
        runTimeTextArea.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    e.consume(); // Ignore non-numeric input
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                // Not needed for this example
            }

            @Override
            public void keyReleased(KeyEvent e) {
                // Not needed for this example
            }
        });
        runTimeTextArea.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (runTimeTextArea.getText().trim().isEmpty()) {
                    runTimeTextArea.setText("0"); // Replace empty with "0"
                }
            }
        });


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(downloadSpeedLabel)
                                                                        .addComponent(UploadSpeedLabel)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel5)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                                        .addComponent(UseBytes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(layout.createSequentialGroup()
                                                                                                .addGap(18, 18, 18)
                                                                                                .addComponent(jLabel9))
                                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                                                .addGap(18, 18, 18)
                                                                                                .addComponent(runTimeTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(160, 160, 160)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel7)
                                                                        .addComponent(statusTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(startStopbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                .addGap(0, 147, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(downloadURLTextArea)
                                                        .addComponent(UploadURLTextArea))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(downloadSpeedLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UploadSpeedLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(downloadURLTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(4, 4, 4)
                                .addComponent(UploadURLTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel9))
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(UseBytes)
                                        .addComponent(runTimeTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(27, 27, 27)
                                .addComponent(statusTextLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startStopbutton)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void downloadURLTextAreaActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void startStopbuttonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (status != Status.STOPPED) {
            status = Status.STOPPED;
            SpeedTestManager.getInstance().stop();
            statusTextLabel.setText("Stopped");
        } else {
            status = Status.DOWNLOADING;
            statusTextLabel.setText("Downloading");
            SpeedTestManager.getInstance().startDownload(downloadURLTextArea.getText(), Integer.parseInt(runTimeTextArea.getText()));
        }
        startStopbutton.setText(status == Status.STOPPED ? "Start" : "Stop");
    }

    public static void create() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpeedTestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpeedTestGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel UploadSpeedLabel;
    private javax.swing.JTextField UploadURLTextArea;
    private javax.swing.JToggleButton UseBytes;
    private javax.swing.JLabel downloadSpeedLabel;
    private javax.swing.JTextField downloadURLTextArea;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JFormattedTextField runTimeTextArea;
    private javax.swing.JButton startStopbutton;
    private javax.swing.JLabel statusTextLabel;

    @Override
    public void onCompleted(long bits) {
        BitType.Result result = BitType.getLargestSize(bits, type);
        String resultString = result.getRoundedString();
        setTitle("Speed Test (By MangoRage)");

        switch (status) {
            case DOWNLOADING:
                downloadSpeedLabel.setText(String.format("Download Speed: %sps", resultString));
                downloadBits = bits;
                statusTextLabel.setText("Uploading");
                status = Status.UPLOADING;
                SpeedTestManager.getInstance().startUpload(UploadURLTextArea.getText(), Integer.valueOf(runTimeTextArea.getText()));
                break;
            case UPLOADING:
                UploadSpeedLabel.setText(String.format("Upload Speed: %sps", resultString));
                uploadBits = bits;
                statusTextLabel.setText("Stopped");
                startStopbutton.setText("Start");
                status = Status.STOPPED;
                break;
        }
    }

    @Override
    public void onProgress(long bits, float progressPercent) {
        BitType.Result result = BitType.getLargestSize(bits, type);
        String resultString = result.getRoundedString();
        setTitle(String.format("Speed Test (By MangoRage) %s -> %s%s", status, progressPercent, '%'));
        switch (status) {
            case DOWNLOADING:
                downloadSpeedLabel.setText(String.format("Download Speed: %sps", resultString));
                downloadBits = bits;
                break;
            case UPLOADING:
                UploadSpeedLabel.setText(String.format("Upload Speed: %sps", resultString));
                uploadBits = bits;
                break;
        }
    }

    @Override
    public void onError(SpeedTestError error, String errorMessage) {
        java.awt.EventQueue.invokeLater(() -> JOptionPane.showMessageDialog(null, String.format("%s -> %s", error.name(), errorMessage), String.format("Error (Status: %s)", status), ERROR_MESSAGE));
    }
}
